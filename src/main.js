const { Telegraf, Markup } = require("telegraf")

module.exports = (bot) => {
    bot
    .start(async ctx => {
        if (ctx.chat.type !== "private") return;
        ctx.start()
    })

    .hears("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", async ctx => {
        if (ctx.chat.type !== "private") return;
        ctx.start()
    })
    .hears("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", async ctx => {
        if (ctx.chat.type !== "private") return;
        await ctx.back("‚ùì")
        await ctx.send("–í—ã–±–µ—Ä–∏ –º–æ–∏ —á–∞—Ç—ã –µ—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —á–∞—Ç, –µ—Å–ª–∏ –∂–µ –Ω–µ—Ç - –¥–æ–±–∞–≤—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —á–∞—Ç –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –≤ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ —É–ø—Ä–∞–≤–ª—è–π –∏–º!")
    })
    .hears("üìÅ –ú–æ–∏ —á–∞—Ç—ã", async ctx => {
        if (ctx.chat.type !== "private") return;
        if (ctx.user.chats.length === 0) return ctx.send("–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —á–∞—Ç—ã, –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—å –æ–¥–∏–Ω —á–∞—Ç!")
        ctx.myChats("send")
    })
    .hears("‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", async ctx => {
        if (ctx.chat.type !== "private") return;
        await ctx.back("üì•")
        await ctx.send(`<b>–ß—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º —Å–ª–µ–¥—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–∞–º:</b>\n\n<b>–ì—Ä—É–ø–ø–∞:</b>\n\n1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω—É–∂–Ω—É—é –í–∞–º –≥—Ä—É–ø–ø—É –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç—É–¥–∞ –±–æ—Ç–∞\n2. –í—ã–¥–∞–π—Ç–µ –±–æ—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞\n3. –ù–∞–ø–∏—à–∏—Ç–µ /connect –≤ –≥—Ä—É–ø–ø–µ\n4. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞.\n\n<b>–ö–∞–Ω–∞–ª:</b>\n\n1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω—É–∂–Ω—ã–π –≤–∞–º –∫–∞–Ω–∞–ª\n2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n3. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª: /connect ${ctx.user.id}\n4. –ï—Å–ª–∏ –≤—Å–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–≥–µ—Ä –Ω–µ –∫—Ä–∏–≤–æ—Ä—É–∫–∏–π :)`, Markup
            .inlineKeyboard([
                [Markup.button.url('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç', `https://t.me/${ctx.botInfo.username}?startgroup=false`)]
            ])
        )
    })

    .action(/chat-(-?\d+)/, async ctx => {
        const [, id] = ctx.match;
        ctx.answerCbQuery()
        const chat = ctx.groups.body[id]
        ctx.edit(`<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —á–∞—Ç–∞ ${chat.title}</b>\n\n–ü—Ä–∏–Ω—è–ª –ª—é–¥–µ–π: <b>${chat.options.accepted}</b>\n\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <b>${chat.options.message}</b>\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: ${chat.options.link}`, Markup.inlineKeyboard([
            [Markup.button.callback("üìç –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", `edit-hello-message-${chat.id}`)],
            [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back")]
        ]))
    })
    .action(/^edit-hello-message-(-?\d+)$/, async ctx => {
        ctx.session.chat_id = ctx.match[1]
        ctx.scene.enter("add_message")
    })
    .action("back", async ctx => ctx.myChats("edit"))
}