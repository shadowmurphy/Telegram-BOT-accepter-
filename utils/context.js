const { Markup, session } = require("telegraf");

const basic_options = { parse_mode: 'HTML', disable_web_page_preview: true };

module.exports = (bot) => {
    Object.assign(bot.context, {
        send: async function(text, extra={}) {
            const chat_id = extra.chat_id || this.chat.id;
            delete extra.chat_id;
            return this.telegram.sendMessage(chat_id, text, Object.assign(extra, basic_options));
        },

        genMention: function(user){
			const { first_name, last_name, id, username } = user ?? this.from;
			return username ? `@${username}` : `<a href='tg://user?id=${id}'>${first_name + (last_name ? ' ' + last_name : '')}</a>`
		},

        edit: async function(text, extra = {}){
			const chat_id = extra.chat_id || this.chat.id;
			const message_id = extra.message_id || this.callbackQuery.message.message_id
			delete extra.chat_id;
			delete extra.message_id;
			return this.telegram.editMessageText(chat_id, message_id, null, text, Object.assign(extra, basic_options));
		},

        start: async function() {
            const buttons = [
                ["‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "üìÅ –ú–æ–∏ —á–∞—Ç—ã"],
                ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç"]
            ]
            if (this.user.is_admin) buttons.push(["üîê –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"])
            await this.send("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –ø–æ–¥ –≤–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞.", Markup.keyboard(buttons).resize())
        },

        back: async function(smile) {
            await this.send(smile, Markup.keyboard(["üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]).resize())
        },

        createChat: async function(chat, userId) {
            if (this.users.users.body[userId].chats.includes(chat.id)) return this.send("–î–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            this.users.users.body[userId].chats.push(chat.id)
            this.groups.body[chat.id] = chat
            this.groups.body[chat.id].options = {
                message: "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                accepted: 0,
                link: (await this.createChatInviteLink({ creates_join_request: true })).invite_link
            }
            this.groups.save()
            this.users.save()
            this.send(`–ß–∞—Ç <b>${chat.title}</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ —á–∞—Ç—ã"`, {
                chat_id: userId
            })
        },

        myChats: async function(method) {
            const buttons = [];
            for (let i in this.groups.body) {
              const num = this.groups.body[i];
              if (this.user.chats.includes(num.id)) buttons.push([Markup.button.callback(num.title, `chat-${num.id}`)]);
            }
            await this[method]("–í–∞—à–∏ —á–∞—Ç—ã:", Markup.inlineKeyboard(buttons));
        }
    })
}